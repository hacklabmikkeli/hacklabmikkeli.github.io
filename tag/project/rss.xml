<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>mikkeli.hacklab.fi</title>
   
   <link>http://mikkeli.hacklab.fi</link>
   <description>Avoin ja yhteisöllinen työtila tieteestä, teknologiasta ja digitaalisesta taiteesta kiinnostuneille Mikkelissä &bull; An open and community-based workspace for people with interest in science, technology and digital arts in Mikkeli</description>
   <language>en-uk</language>
   <managingEditor> Hacklab Mikkeli</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Car voltage meter</title>
	  <link>//Car%20voltage%20meter</link>
	  <author>Hacklab Mikkeli</author>
	  <pubDate>2016-03-17T22:46:41+00:00</pubDate>
	  <guid>//Car%20voltage%20meter</guid>
	  <description><![CDATA[
	     <p>Part of this bigger project, car computer, I wanted sepatate meter for voltage, in case of alternator fault.
Idea is simple; voltage divider circuit converts voltage for more suitable level for AtTiny85 that can handle up to 5 volts to ADC (analog to digital converter
and Attiny then converts this data and shows it in 7-segment display. Also there is bargraph display to give another perspective, easier to look on-road that charge level is in &quot;green&quot;
region, not too much or too low.
<img src="http://i.imgur.com/bvQljwu.jpg" alt="voltagemetercircuit"></p>

<p>Once again, prototyping started at breadboard, and I also made AtTiny programming shield for easier coding sessions, no need to play that much with jumper wires.
<img src="http://i.imgur.com/QUHLYzB.jpg" alt="voltagemeterbreadboard">
<img src="http://i.imgur.com/RMdzoNE.jpg" alt="voltagemetershield"></p>

<p>There was quite chore to place all stuff in confined area (inline fuse is also coming in final installation):
<img src="http://i.imgur.com/oflhAzT.jpg" alt="voltagemeterproto">
<img src="http://i.imgur.com/vHHT4UJ.jpg" alt="voltagemeterproto1"></p>

<p>Another trouble was finding suitable enclosure, but recently bought 52mm dashboard meter casings, and all that was needed was meter panel, solution was 3d-printer.
<img src="http://i.imgur.com/AFH2g7X.jpg" alt="voltagemeter3dprint">
And in the end, it looks quite good in dark too:
<img src="http://i.imgur.com/kgAxl9h.jpg?1" alt="voltagemeterdark"></p>

	  ]]></description>
	</item>

	<item>
	  <title>Started doing car computer</title>
	  <link>//Starting%20of%20car%20computer</link>
	  <author>Hacklab Mikkeli</author>
	  <pubDate>2016-03-03T22:46:41+00:00</pubDate>
	  <guid>//Starting%20of%20car%20computer</guid>
	  <description><![CDATA[
	     <p>Long time I&#39;ve longed for this project as I lacked skill. Now was great time for this project, as I&#39;ve stumbled on teensy 3.2. 
Teensy 3.2 has horsepower and memory for pretty much all projects possiblse, and in this case I&#39;m planning to combine quite many tasks
to one microcontroller; car computer data, RTC, gps tracking(which also has combined feature of theft-alarm, using SIM800L) as well as
real-time audio manipulation along FFT. First things first, I started checking simple commands, like read battery voltage, and true indeed,
it worked. The device I use for talking with car computer (ECU) is sparkfun&#39;s obd-uart board, which allows any serial capable device to serve as end-terminal
for diagnostics.
I&#39;ve so far managed to put code that allows pretty much all real-time data to be checked, even throttle and stress levels, as well as draw bar display of reguested values.
In this photo is initial test which has echo as well as carbage characters, but they were ok back the initial testing whether my car&#39;s protocol is supported or not.
Also, screen is in photo 20x4 alphanumeric LCD, but currently I&#39;m using 0,96&quot; 128x32 OLED, it has many benefits over lcd, except size, but I&#39;ll place it anyway right on front of my eyes so 0,96&quot; is enought.
<img src="http://i.imgur.com/taSULgy.jpg?1" alt="computer"></p>

	  ]]></description>
	</item>

	<item>
	  <title>7-band equalizer</title>
	  <link>//seven-band-equalizer</link>
	  <author>Hacklab Mikkeli</author>
	  <pubDate>2016-02-05T15:41:41+00:00</pubDate>
	  <guid>//seven-band-equalizer</guid>
	  <description><![CDATA[
	     <p>Not yet FFT, but getting close, this is simple 7-band graphic equalizer. Microphone amplifier, which has fixed gain of 20db, measures
surrounding noises. These noises are then fed to msgeq7-chip, made by MSI. Bit expensive chip, and so far only sparkfun seems to sell them.
What it does, is creates 7-band of different frequency regions, all are peak-detected and well filtered. Also, it creates 20db amplification.
This dc-voltage from msgeq7 is then fed to teensy 3.2, microcontroller that does rest of magic; controls msgeq7, reads and stores values, as well controls i2c 
bus OLED screen (128x64, blue colour). There is also bit conversion made before showing data, and that is just simple mapping function.
I don&#39;t have audio shield yet, but couple of those should arrive next week, and with that is possible to manipulate/mix and stuff like that real time at 16bit/44khz (cd quality)
as well as control real time FFT. But, even this simple version works well:</p>

<iframe width="420" height="315" src="https://www.youtube.com/embed/oXUSYADG080" frameborder="0" allowfullscreen></iframe>

	  ]]></description>
	</item>

	<item>
	  <title>Testing AtTiny85's</title>
	  <link>//Testing%20AtTiny85's</link>
	  <author>Hacklab Mikkeli</author>
	  <pubDate>2016-01-01T20:09:41+00:00</pubDate>
	  <guid>//Testing%20AtTiny85's</guid>
	  <description><![CDATA[
	     <p><em>Testing....</em>
<img src="http://i.imgur.com/sW9Hx79.jpg" alt="AtTiny85_test">
Some projects doesn&#39;t need big&#39;n beefy microcontroller, this little one can tackle many projects like RTC clock
or say matrises &amp; cubes with shift registers.  Clock frequency is selectable between 1Mhz-20Mhz, but 16 seems to be enough. 16 needs external crystal,
but some people have managed to install it as internal freguency.
Only problem with this chip is that there is no hardware serial (well, there is i2c bus but needs to be enabled separately, bit different than normal serial), but that can be created with code. Test code I burned was just simple
10hz led-blinker, but that&#39;s enough proof whether ic works at all, and It&#39;s fast to load this code.</p>

<p>After testing, better to store these accordingly, ready to be used now:
<img src="http://i.imgur.com/i5yK14Q.jpg" alt="AtTiny85__test_OK"> </p>

	  ]]></description>
	</item>

	<item>
	  <title>Elektroniikkalabran varustelu</title>
	  <link>//elektroniikkalabran-varustelu</link>
	  <author>Hacklab Mikkeli</author>
	  <pubDate>2015-11-19T19:30:00+00:00</pubDate>
	  <guid>//elektroniikkalabran-varustelu</guid>
	  <description><![CDATA[
	     <p>Hacklab Mikkelin ensimmäinen toimintavuosi alkaa lähestyä loppuaan. Vuoteen mahtui niin perustaminen helmikuussa kuin Fuugin säätiön rahoituksen saaminen myöhemmin keväällä. Käytännössä rahoituksen avulla oli mahdollista saada toimintaan nopea lähtö ja toteuttaa missiota alusta saakka.</p>

<p><a href="http://fuug.fi/saatio/">Fuugin säätiö</a> rahoitti Hacklab Mikkelin työtilan varustelua yhteensä 2000 eurolla. Avustuksella rahoitettiin mm. 3D-tulostin, joka tilattiin osina ja koottiin itse. Kokoaminen oli opettavainen projekti jo itsessään. Tulostin on myös yksi varustelun vetonauloista sekä tapahtumissa että työtilassa. Avustuksen turvin hankittiin uteliaiden käyttöön myös tulostuslankaa.</p>

<p><img src="/public/images/fuug-1.jpg" alt=""></p>

<p>3D-tulostin ja asiaankuuluva pikakorjaus teipillä.</p>

<p>Lisäksi rahoituksella varustettiin uskottava elektroniikkapaja, johon kuuluu kolme työpistettä, juotosasemia, juotostelineitä, yleismittareita, teholähteitä, oskilloskooppi, logiikka-analysaattori, Arduinoja, Raspberry Pi 2 -tietokoneita ja tietysti paljon yhteiskäyttöön tarkoitettuja peruskomponentteja ja työkaluja. Elektroniikkapaja on ahkerassa käytössä viikoittain ja siellä on työstetty monia projekteja kuten moottoroitua longboardia, omavalmisteista syntetisaattoria, IoT-leivänpaahdinta ja erilaisia robotteja, sensoreita ja tietenkin vilkkuvaloja.</p>

<p><img src="/public/images/fuug-2.jpg" alt=""></p>

<p>Elektroniikkapaja alkaa muistuttaa ulkonäöltään perinteistä Hacklabia. Kuvassa myös MadBot: pölynimurin ja Twitter-botin risteytys.</p>

<p><img src="/public/images/fuug-3.jpg" alt=""></p>

<p>Pajassa tuunattu tee-se-itse syntetisaattori ja Fuugin rahoituksella ostettu digitaalinen oskilloskooppi.</p>

<p>Varustelun ansiosta Hacklab on voinut tarjota jäsenilleen ja muille uteliaille avoimen työtilan sekä järjestää useita tapahtumia mm. kansainvälisellä EU koodiviikolla tapahtuneen Internet of Things -hackathonin. Hacklab tarjoaa myös ilmaisia ja avoimia elektroniikan ja 3D-tulostamisen peruskursseja. Työtila koostuu elektroniikkapajasta, 3D-tulostus- ja tietokonetilasta, sotkuisen työn tilasta ja hengailuloungesta.</p>

<p><img src="/public/images/fuug-4.jpg" alt=""></p>

<p>Internet of Things hackathon, osana kansainvälistä EU Koodiviikkoa. Kuvassa edustettuina Open Knowledge Finland, API:Suomi sekä kolmen eri Hacklabin perustajia. Kiitos avustuksen turvin ostettujen varusteiden, tämäkin tapahtuma oli mahdollista toteuttaa.</p>

	  ]]></description>
	</item>

	<item>
	  <title>4x4x4 led cube</title>
	  <link>//4x4x4-led-cube</link>
	  <author>Hacklab Mikkeli</author>
	  <pubDate>2015-11-17T12:00:00+00:00</pubDate>
	  <guid>//4x4x4-led-cube</guid>
	  <description><![CDATA[
	     <p>Enought complex project in both as mechanical and, possibly, how complex pattern one wants to show up on cube.
As this is 4-square cube, pattern can&#39;t be much complicated, so i added bit more touch in with clock and . 
Time is in memory of special chip. If you have normal radio-clock, you might have noticed that when/if main power goes out
so does time, gets nulled and must be set again. RTC chip keeps time, and is handy also when making stuff to happen in excact 
intervals like putting coffee machine or car heater on, you name it.
The idea behind using mirror-plating is to create same illusion as in infinity mirrors seen on web:
When general room is brightly lit, mirror-plating acts like mirror. When it&#39;s dark, you can see throught it
This is how it looks in bright room:
<img src="http://i.imgur.com/tnVL1M5.jpg" alt="Brightroomcube-off">
Bright room, with power:
<img src="http://i.imgur.com/z8CHEUc.jpg" alt="Brightroomcube-on">
Dark room, power on:
<img src="http://i.imgur.com/hHg1sDC.jpg" alt="darkroomcube-on"></p>

<p><em>Cube construction</em>
Construction of even small cubes can be tricky process, but small things matter,
like supporting and holding things together while swinging around with soledring iron.
That said, it&#39;s important that joints are smooth, and used small amount of solder, you don&#39;t want any shortcircuits in finished product!
Construction starts by checking(DOA&#39;s and other malfunctions can be possible)  and bending cathodes of each led.
On the background is seen handy jig, just plywood, with holes drilled, in how frequent one wants cube to be.
The thinner it is, the harder it is to solder and transparency suffers
the thicker, easier to solder, but takes more space and must be looked farther away
<img src="http://i.imgur.com/8NEjrJM.jpg" alt="ledbent">
Then, bent leds are placed in series in a way, clusters of 3, which are then soldered cathoded together.
Alligator clip holds led together while soldering
<img src="http://i.imgur.com/pYIeVzH.jpg" alt="ledrow">
<img src="http://i.imgur.com/6dALH0K.jpg" alt="ledcluster">
The end cathode of each led rows, is slighly bent to make it easier to join them together at last row
<img src="http://i.imgur.com/6xjpThL.jpg" alt="ledclusterbentcathode">
rows circuit
<img src="http://i.imgur.com/BWwmAhU.jpg" alt="circuitrow">
The bend soldered on last row, forgot to say, last row has 4 leds in row, so there&#39;s 3 pieces of 3 leds rows, and one 4 led rows, on each layer (4 layers)
<img src="http://i.imgur.com/KJzzVjD.jpg" alt="bentsoldered">
Sadly, i didn&#39;t take photo of situation where leds are floating, but there is situation when leds are &#39;&#39;floating&#39;&#39; unsupported on other end
Small piece of wire is joined to &#39;&#39;floating&#39;&#39; end of layer
<img src="http://i.imgur.com/8t7L5ZJ.jpg" alt="layersupport">
small hook, easier to solder and start soldering that prementioned support
<img src="http://i.imgur.com/FuveFoc.jpg" alt="layersupporthook">
layers circuit
<img src="http://i.imgur.com/i561j4k.jpg" alt="circuitlayer">
finished layer, DON&#39;T cut that tail of cathode yet, it serves as testing post for each layers cathode (in this scale of project, it&#39;s better to test now and then)
<img src="http://i.imgur.com/58gWZHZ.jpg" alt="finishedlayer">
with added strength for faith
<img src="http://i.imgur.com/0o1ac7F.jpg" alt="finishedlayershrinks">
Now comes annoying part: you have 4 layers, gotta solder them together top of each other.
Bend each anode of each led, this serves as base where to plant next layer coming.
When you start soldering, solder each bar/columns anodes togehter, so in end product you have only 4 cathodes, but anodes 16.
Hard to describe...this is one of annoying parts of this project!
finished cube should look like this.
<img src="http://i.imgur.com/0tPz59O.jpg" alt="finishedcube">
Then it&#39;s placed on veroboard, painted black on purpose. Also, now there are layer cathodes going down too, they decide what layer is on at what time.
<img src="http://i.imgur.com/AqHo7mZ.jpg" alt="finishedcubeblackpcb">
And you need to make connection for all anodes and layer cathodes, make some sort of order/organization to make it clear for yourself.
Green wires are layer cathodes
<img src="http://i.imgur.com/rLw0rSR.jpg" alt="finishedcubebackpcb"></p>

<p>*Controller board (shift regsisters and RTC)
In control, shift registers play big role: what they do, simply put, control in this case lot of input/outputs in few microcontroller pins
without these, 20 pins would be needed, but now 3 is needed
Data is sent in serial-format, these shift registers i use are 74595 Serial in-paraller out and they are very fast, no idea how many you can chain together
RTC is not yet seen in this photo
<img src="http://i.imgur.com/jxyfEqz.jpg" alt="controllerfront">
had to place jumper wires behind board too
<img src="http://i.imgur.com/U6eQ1Ze.jpg" alt="controllerback">
RTC is shown here, in breadboard, i2c-bus, ds1307
<img src="http://i.imgur.com/IPYgFDx.jpg" alt="RTC">
to further eliminate pins needed in microcontroller, i used i2c in lcd too, it goes in same pins with RTC
The i2c enables just this, placing many stuff in same pins. Think it like addresses: each house has their own address, and get their own mail
Didn&#39;t have any OLED screens, but lcd will do.
<img src="http://i.imgur.com/5EtCwfC.jpg" alt="i2clcd">
As microcontroller i use arduino pro mini, due small size mainly, FTDI-USB converter also seen on photo
<img src="http://i.imgur.com/VdtENUV.jpg" alt="micro">
And here&#39;s all electronic stuff that must be stuffed in enclosure, excepct FTDI, that is only used in programming, or as as USB power adapter if you want
<img src="http://i.imgur.com/amdLySk.jpg" alt="electronics"></p>

<p><em>Enclosure</em>
This part is much easier if you decide to buy plastic box, or steel you know the drill
But, i decided to make one from oak
There is used stopped grooves, so special technique is used, wooden blocks are used as stops do deside lenght of groove
<img src="http://i.imgur.com/Mdkixhw.jpg" alt="groovebit">
<img src="http://i.imgur.com/Jq94y29.jpg" alt="groovestops">
Also, groove, or more like straight plunge bit is used in making hole for lcd
<img src="http://i.imgur.com/mGLJpEf.jpg" alt="lcdhole">
Box thus far, without finishing
<img src="http://i.imgur.com/HRsAzKE.jpg" alt="boxunfinished">
Raw cuts for frames
<img src="http://i.imgur.com/mnQaCHa.jpg" alt="frames">
Now there&#39;s linseed oil on box, along with mounted electronic stuff inside
<img src="http://i.imgur.com/7Q7qH4Z.jpg" alt="finishedbox">
On back there is power and programming connections
<img src="http://i.imgur.com/dJHRHzN.jpg" alt="finishedboxback">
I didn&#39;t feel confortable cutting glass, so i decided to try plexiglass for windows: cut grooves and slam/snap along table edge
I highly suggest using safety glasses, plexi can be unpredictable
<img src="http://i.imgur.com/0FOvFfc.jpg" alt="cuttingplexi">
And couple of shots from different situations, mainly to show how mirror plating behaves
<img src="http://i.imgur.com/65wPjIQ.jpg" alt="brightoff">
<img src="http://i.imgur.com/kMNv5ny.jpg" alt="brighton">
<img src="http://i.imgur.com/Vrygzwn.jpg" alt="darkon"></p>

	  ]]></description>
	</item>

	<item>
	  <title>Knobs Galore, osa 5</title>
	  <link>//knobs-galore-osa-5</link>
	  <author>Hacklab Mikkeli</author>
	  <pubDate>2015-03-24T15:30:11+00:00</pubDate>
	  <guid>//knobs-galore-osa-5</guid>
	  <description><![CDATA[
	     <p>Tein äänisimulaation muutamista soundeista:</p>

<iframe width="100%" height="450" scrolling="no" frameborder="no" style="margin-bottom: 2em;" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/197454385&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>

<p>Kuten näytteestä kuuluu, äänet ovat vielä karuja verrattuna esimerkiksi <em>CZ-101</em>:n, mutta niissä alkaa olla jo hieman vaihtelua. Yritin saada ääneen lämpöä omalla tavallani: pitkissä &quot;jousi&quot;soundeissa joka toisen aallon taajuus on moduloitu LFO:lla, jolloin syntyy eräänlainen chorusing-efekti.</p>

<p>&quot;Resonanssi&quot; niin ikään on toteutettu samankaltaisella tekniikalla: joka toisen aallon taajuus ei tulekaan koskettimistolta, vaan se on laskettu &quot;suodattimen&quot; rajataajuus. Resonanssiin käytetty aalto on aaltomuodoltaan tietenkin siniaalto, jollon spektriin muodostuu resonanssipiikki. Molemmissa tapauksissa muokkaamaton &quot;perusaalto&quot; tulee aina tasaisin väliajoin, joten äkillisten signaalihyppyjen välttämiseksi muokatut aallot kerrotaan ikkunafunktiolla. Tätä tekniikkaa voi verrata kahteen, synkronoituun oskillaattoriin, mutta se lisää ääneen lisäksi oktaavin verran perustaajuutta matalamman ääneksen.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Knobs Galore, osa 4</title>
	  <link>//knobs-galore-osa-4</link>
	  <author>Hacklab Mikkeli</author>
	  <pubDate>2015-03-14T11:44:52+00:00</pubDate>
	  <guid>//knobs-galore-osa-4</guid>
	  <description><![CDATA[
	     <p>Rakensin pienen &quot;koskettimiston&quot; breadboardille, joten nyt härpäkettä voi soittaakin!</p>

<iframe style="margin-bottom: 2em;" width="560" height="315" src="https://www.youtube.com/embed/videoseries?list=PLXbye9qrKoGMEYXIAMA_NOajRKy-63R59" frameborder="0" allowfullscreen></iframe>

<p>Soitin on vielä monofoninen, mutta lisäsin siihen ohjatun vahvistimen, joten se ei kuulosta enää yhtä karulta kuin aikaisemmin. Vahvistimen lisääminen tosin lisäsi piirin viemää tilaa FPGA:lla melkoisesti, joten jouduin hieman laskemaan sen tarkkuutta tulevaisuutta ajatellen. Myöhemmin pitää keksiä vahvistimelle vähemmän tilaa vievä ratkaisu. Julkaisin projektin GNU GPL 3-lisenssin alaisuudessa, jossa tosin puhutaan vain ohjelmistosta, mutta eikö teknisesti ottaen FPGA:n muistiin ladattu bitfile ole jonkin sortin ohjelmisto, vaikka sitä ei mikroprosessorilla ajetakaan?</p>

<hr>

<p>Projektin lähdekoodit ovat saatavilla <a href="https://github.com/hacklabmikkeli/knobs-galore">GitHubissa</a>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Knobs Galore, osa 3</title>
	  <link>//knobs-galore-osa-3</link>
	  <author>Hacklab Mikkeli</author>
	  <pubDate>2015-03-13T12:04:00+00:00</pubDate>
	  <guid>//knobs-galore-osa-3</guid>
	  <description><![CDATA[
	     <p>Nyt on jo ääninäytettä tarjolla!</p>

<iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/195661180&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>

<p>Okei, se ei ole oikeasta vaan simuloidusta syntetisaattorista. Kyseistä näytettä varten toteutin ramppigeneraattorin, ADSR-vaippageneraattorin vaihevääristymäparametria (<em>&quot;cutoff&quot;</em>) varten, vaihevääristimen sekä siniaalto-look-up-taulukon. Lisäksi toteutettuna on D/A-muunnin ja rengaspuskuri, jotka tulevat lopulliseen syntetisaattoriin. Olen kasannut suunnitelmani oheiseen kuvaan, jonka mukaan toteuttamatta ovat vielä ohjaus ja vahvistus, sekä tietenkin integraatio koskettimistoon ja näppäimiin.</p>

<p><img src="http://i.imgur.com/JEhXoJF.png" alt="Suunnitelmia">
<em>Suunnitelma lopullisesta systeemistä</em></p>

<p>Nykyisellään syntetisaattorin voi myös syntetisoida <em>(heh)</em> ja ladata Papilioon, mutta se on vain monofoninen, sillä äänten allokointia ei ole toteutettu. Ajattelin aluksi, että äänet allokoitaisiin &quot;älykkäästi&quot; (otetaan aina seuraava vapaana oleva kanava käyttöön), mutta Xilinx ISEn raporteista kävi ilmi, että nykyisellään vain 2% sliceistä on käytettynä. Kellopulssejakin on käytössä 488 kutakin näytettä kohden, joten voin yhtä hyvin varata kullekin koskettimelle yhden kanavan, joten äänien allokoinnista tulee triviaali tehtävä, ja bonuksena syntetisaattoriin tulee täysi polyfonia!</p>

<p>Seuraavaksi aion kasata piirilevylle kalvokytkimistä pienen &quot;koskettimiston&quot;, joiden avulla syntetisaattoria voi soittaakkin (: sitä seuraavana listalla ovat myös vahvistuksen toteuttaminen (ajattelin toteuttaa sen yksinkertaisena look-up taulukkona, kuten vaihevääristymän ja aaltomuotogeneroinnin) ja moniäänisyys.</p>

<hr>

<p>Projektin lähdekoodit ovat saatavilla <a href="https://github.com/hacklabmikkeli/knobs-galore/">GitHubissa</a>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Knobs Galore, osa 2</title>
	  <link>//knobs-galore-osa-2</link>
	  <author>Hacklab Mikkeli</author>
	  <pubDate>2015-03-10T15:32:11+00:00</pubDate>
	  <guid>//knobs-galore-osa-2</guid>
	  <description><![CDATA[
	     <p>Käytän syntetisaattorin runkona saksalaisen Simban <em>My Music World</em>-lelukosketinsoitinta. Kyseisellä nimellä myydään useita soittimia, mutta minun soittimeni on kuulemma oikein <a href="http://simbatoys.de/en/brands__products/my_music_world/keyboard_instruments/detail.shtml?sArtNr=106835366">modernin tyylinen</a>. Kosketinsoitin on varsin sopiva tarkoituksiini: siinä on juuri sopiva määrä näppäimiä käyttöliittymää varten ja se on melko pieni, mutta sen sisään on helppo laittaa esimerkiksi Papilio (tai muu piirilevy). Ennen kaikkea kuitenkin siinä koskettimisto ja näppäimistö ovat erillään itse elektroniikasta, lattakaapelilla yhdistettynä, joten ne on helppo yhdistää omiin tekeleisiini! Soitin maksoi uutena 14 euroa Mikkelin Prismassa.</p>

<p><img src="http://i.imgur.com/mneJdTVl.jpg" alt="Simba My Music World"></p>

<p><em>Simba My Music World</em></p>

<p>Mielestäni syntetisaattoreissa pitää mielellään olla paljon nuppeja; mitä enemmän, sen parempi. Nupit ja slaiderit ovat paljon intuitiivisempia mielestäni kuin valikkokäyttöliittymät, joten otan niistä inspiraatiota. Ikävä kyllä lelukosketinsoittimissa ei erinäisistä syistä ole nuppeja kuin enintään äänenvoimakkuudelle, joten joudun päätymään toisenlaiseen käyttöliittymäratkaisuun. </p>

<p>Käyttöliittymä on vasta suunnitteluvaiheessa, mutta ajattelin tehdä jokaista parametria varten 2 nappia: <code>+</code>, joka kasvattaa ko. parametria, sekä <code>-</code>, joka pienentää sitä &mdash; valikoita ei siis tarvita. Teen myös hienoa ja karkeaa säätöä varten omat napit: <code>x10</code>-napin painamisen jälkeen kukin napin painallus muuttaa parametria kymmenellä, ja <code>x1</code>-napin painamisen jälkeen yhdellä. Käytän kahta nappia, jotta käyttäjän ei tarvitsisi muistaa kummassa tilassa koskettimisto on kullakin hetkellä. Parametrien näyttämiseksi ei ole näyttöä, joten ne pitää säätää korvakuulolla, mutta saatan lisätä yksinkertaisen numeronäytön myöhemmin.</p>

<p><img src="http://i.imgur.com/trexEFyl.jpg" alt="Käyttöliittymä"></p>

<p><em>Esimerkki siitä, millainen käyttöliittymä voisi olla</em></p>

<p>Syntetisaattorissa ei ole kovin paljon toimintoja, joten napit riittävät varsin hyvin. Säätimiä tarvitaan ainakin</p>

<ul>
<li>amplitudin verhokäyrälle (<code>V[ADSR]</code>)</li>
<li>pseudosuotimen kynnystaajuudelle (<code>Cutoff</code>)</li>
<li>pseudosuotimen verhokäyrälle (<code>F[ADSR]</code>)</li>
<li>pseudosuotimen verhokäyrän määrälle (<code>Env</code>)</li>
<li>aaltomuodolle (<code>WF</code>)</li>
<li>äänenvoimakkuudelle (<code>Vol</code>) sekä</li>
<li>ohjelmamuistille (<code>Preset</code>, <code>Load</code>, <code>Save</code>)</li>
</ul>

<hr>

<p>Projektin lähdekoodit ovat saatavilla <a href="https://github.com/hacklabmikkeli/knobs-galore/tree/master">GitHubissa</a>.</p>

	  ]]></description>
	</item>


</channel>
</rss>
